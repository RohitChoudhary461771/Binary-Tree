//According to question we  have to exclude the null values .for finding the width of tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)return 0;
        
        int ans=0;
        queue<pair<TreeNode*,long long int>>q;
        q.push({root,0});
        while(!q.empty()){
            int n=q.size();
            int mini=q.front().second;
            int first,last;
            for(int  i=0;i<n;i++){
                int curr=q.front().second-mini;
                cout<<curr<<" ";
                TreeNode* val=q.front().first;
                q.pop();
                if(i==0)first=curr;
                if(i==n-1)last=curr;
                if(val->left){
                    q.push({val->left,curr*2LL+1});
                } 
                if(val->right){
                    q.push({val->right,curr*2LL+2});
                }
            }cout<<endl;
            //cout<<last<<" "<<first<<endl;
            ans=max(ans,last-first+1);
            //cout<<ans<<",";
        }
        return ans;
    }
};
